@page "/Moisture"
@using C1.Chart;
@using C1.Blazor.Chart;


<PageTitle>Temperature Graphs</PageTitle>

@using BlazorApp1.Models
@using BlazorApp1.Services
@inject AuthenticationStateProvider AuthenticationStateProvider
@inherits OwningComponentBase<OldDataService>

<AuthorizeView>
    <NotAuthorized>
        <p>youre not logged in!</p>
    </NotAuthorized>
    <Authorized>
        @if (devices == null || old == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            foreach (var device in devices)
            {
                <header>@device.Name</header>

                @*<FlexChart ItemsSource="oldD" BindingX="Count">
        <SeriesCollection>
        <Series Binding="Temp" />
        </SeriesCollection>
        </FlexChart>*@

                <FlexChart ItemsSource="oldD" BindingX="Count" ChartType="ChartType.SplineSymbols" HeaderContent="Last 10 Days" HeaderStyle="font-size:24px">
                    <SeriesCollection>
                        <Series Binding="SoilMoisture" />
                    </SeriesCollection>
                    <AxisCollection>
                        <Axis AxisType="AxisType.X" Position="Position.Bottom" AxisLine="false" Format="MMM-d" MajorTickMarks="TickMark.None" />
                        <Axis AxisType="AxisType.Y" Position="Position.Left" Title="Soil Moisture, %" AxisLine="false" MajorTickMarks="TickMark.None" MajorGrid="true" />
                    </AxisCollection>
                </FlexChart>

            }
        }
    </Authorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    //make a list of the old data
    OldData[]? oldD;
    List<OldData> old = new List<OldData>();
    List<Device> devices = new List<Device>();
    private string UserIdentityName = "";

    //returns all devices related to  that username
    protected override async Task OnInitializedAsync()
    {
        // Get the current user
        if (authenticationStateTask != null)
        {
            var user = (await authenticationStateTask).User;

            if (user.Identity != null)
            {
                UserIdentityName = user.Identity.Name ?? "";
            }

        }
        devices = await Service.GetDevicesAsync(UserIdentityName);
        old = await Service.GetDataAsync(1);
        oldD = old.ToArray();
    }

    public async Task<OldData[]> LoadList(int id)
    {
        List<OldData> thisList = new List<OldData>();

        thisList = await Service.GetDataAsync(id);

        oldD = thisList.ToArray();
        return oldD;
    }
}
